
static const Tabs = [ 'terminal', 'debug', 'build', 'error' ]

class {
  onCreate(){
    this.state = { active: window.Store.get('console-active-tab') || 'debug' }
    GState.bind( this, ['logs'] )
  }
  onUpdate(){
    const elem = this.getEl('scroll-up-body')
		$(elem).animate({ scrollTop: elem.scrollHeight }, 400 )
  }
  onToggle( type ){
    this.state.active = type
    window.Store.set('console-active-tab', type )
  }
  getCountBy( type ){
    return {
      color: type == 'error' ? 'danger' : 'secondary',
      count: this.state.logs.filter( log => { return log.type === type } ).length
    }
  }
}

<div.in-block.h-100.position-relative.zindex-3>
  <!-- Tabs -->
  <div.header.position-relative.zindex-1.theme-bg-fade>
    <ul.list-inline.m-0>
      <for|type, index| of=Tabs>
        <li.px-1.py-50.cursor-pointer.d-inline-flex.align-items-center
            class=( state.active == type ? 'theme-bg' : false )
            on-click( 'onToggle', type )>
          <span>${type.toCapitalCase()}</span>
          
          <!-- Display number of logs -->
          <if( state.active !== type )>
            $ const { count, color } = component.getCountBy( type )

            <if( count )>
              <span.rounded-circle.font-small-3.px-50.mx-50 class=`bg-${color}`>${count}</span>
            </if>
          </if>
        </li>
      </for>

      <li.px-1.py-50.cursor-pointer.float-right>
        <Bx.font-medium-5 type="x" on-click( () => component.emit('dismiss') )/>
      </li>
    </ul>
  </div>

  <!-- Tab contents -->
  <div.position-absolute.top-0.w-100.h-100.overflow-auto 
      key="scroll-up-body" 
      style="padding: 3rem 0 1rem 0">
    <Switch by=state.active>
      <@case is="terminal"></@case>
      
      <!-- Debuging logs -->
      <@case is="debug">
        <!-- Initial log -->
        <div.px-1.py-50.text-muted>
          <Locale text="Initialized"/>
        </div>

        <!-- Realtime `debug` logs -->
        <for|log| of=state.logs>
          <Debug cwd=input.cwd ...log/>
        </for>
      </@case>

      <!-- Build time logs -->
      <@case is="build"></@case>

      <!-- Runtime error logs -->
      <@case is="error">
        <for|log| of=state.logs>
          <Error cwd=input.cwd ...log/>
        </for>
      </@case>
    </Switch>
  </div>
</div>