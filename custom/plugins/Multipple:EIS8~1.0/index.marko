
import Channel from './lib/channel'
import {
  SANDBOX_RULES,
  ACCOUNT_TYPES,
  REQUIRED_FEATURES,
  ACTIVITY_CONTEXTS
} from './lib/specs'

class {
  onCreate(){
    this.state = {
      languages: null,
      tests: null,
      testMode: false
    }
  }
  onAction( _event, data, fn ){ this.iof.emit( _event, data, fn ) }
  onLoaded( e ){ Channel.bind( this )( e ) }
  onRestart(){ this.emit('restart') }
  onOpenTest( status ){ this.state.testMode = status }
  onStop(){
    // Send QUIT signal to service
    // this.iof.emit('signal', 'USER:QUIT')
    // Delay closing emulator to observe service behaviour during stopping process
    setTimeout( () => this.emit('stop'), 1500 )
  }
}

<div.Emulator.h-100>
  $ const { name, hostname, pid, process } = input.metadata || {}
  
  <if( hostname && process && process.started )>
    <iframe.rounded-lg
            src=`${hostname}?wp=iframe&base=${pid}`
            style="width:calc(100% - 2rem);height:calc(100% - 2rem);margin:1rem;border:none"
            title=name
            importance="high"
            referrerpolicy="origin"
            allow=REQUIRED_FEATURES.join()
            sandbox=SANDBOX_RULES.join(' ')
            on-load('onLoaded')></iframe>

    <!-- Controls -->
    <ControlBar accountTypes=ACCOUNT_TYPES
                contexts=ACTIVITY_CONTEXTS
                languages=state.languages
                tests=state.tests
                testMode=state.testMode
                on-stop('onStop')
                on-restart('onRestart')
                on-action('onAction')
                on-open-test('onOpenTest')/>
  </if>
  <else>
    <div.w-100.h-100.d-flex.align-items-center.justify-content-center>
      <!-- Processing stage status -->
      <if( input.status )>
        <div.w-100.text-center>
          <Preloader.font-large-3 active=true/>
          <br><br>
          <if( process && process.output )>
            <div.px-4.d-flex.align-items-center style="min-height:15rem">
              <div.w-100>
                <div.w-100.theme-bg-lighten.rounded.overflow-hidden style="height:2px">
                  <div.h-100.theme-bg-primary style=`width:${process.output.percent || 0}%`></div>
                </div>
                <br>
                <if( process.output.message )>
                  <p.text-muted>${process.output.message}</p>
                </if>
              </div>
            </div>
          </if>
          <else><Locale text=(input.status || 'Restarting').toCapitalCase()/></else>
        </div>
      </if>
      <!-- Display error message -->
      <else-if( input.error )>
        <div.text-center>
          <Bx.font-large-3.text-warning type="cube-alt"/>
          <br><br>
          <p.px-4>${input.error}</p>
          <br>
          <Button type="md" on-click('onRestart')>Retry</Button>
        </div>
      </else-if>
      <else>
        <Bx.font-large-3.text-muted type="cube-alt"/>
      </else>
    </div>
  </else>
</div>

<if( state.testMode )>
  <TestKit tests=state.tests
            iof=component.iof
            on-action('onAction')
            on-dismiss('onOpenTest', false )/>
</if>