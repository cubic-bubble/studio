
import ADDONS from './addons.json'

static const APITabs = [
  {
    type: 'GET',
    name: 'Test Get Request',
    link: '...'
  },
  {
    active: true,
    type: 'POST',
    name: 'Test Post Request',
    link: '...'
  },
  {
    type: 'PUT',
    name: 'Test Put Request',
    link: '...'
  },
  {
    type: 'DELETE',
    name: 'Test Delete Request',
    link: '...'
  },
  {
    type: 'PATCH',
    name: 'Test Patch Request',
    link: '...'
  },
  {
    type: 'HEAD',
    name: 'Test Head Request',
    link: '...'
  },
  {
    type: 'OPTIONS',
    name: 'Test Options Request',
    link: '...'
  }
]

class {
  onCreate({ params }){
    this.state = {
      workspace: GState.workspaces.get( params.id ),
      project: false,

      IDE: {},
      API: {},

      activeTool: 'IDE',
      activeElement: null,
      
      emulator: false,
      emulatorError: false,
      emulatorStatus: false,

      showNav: true,
      showSearch: false,
      showConsole: false,
      showAddElement: false,

      tabs: [],
      ongoingSetup: false,
      ongoingProcess: false,

      editorCursorPosition: null
    }

    this.fs = false
    this.pm = false
    this.emulator = false
  }
  async onInput({ params }){
    // Fetch project metadata
    await this.getProject( params.id, params.project )
    
    this.state.showConsole = uiStore.get( this.getAttr('active-console') )
  }
  onAction( action, ...args ){
    switch( action ){
      case 'open': this.Open( ...args ); break
      
      case 'move':
      case 'rename':
      case 'remove':
      case 'new-dir': 
      case 'new-file': this.FSOperator( action, ...args ); break
      case 'cursor-position': this.state.editorCursorPosition = args[0]; break

      case 'run-emulator': this.RunEmulator( ...args ); break
      case 'reload-emulator': this.ReloadEmulator(); break
      case 'quit-emulator': this.QuitEmulator(); break
    }
  }
  onMenuToggle( name ){ this.state.activeTool = name }
  onSearchToggle( args ){ this.state.showSearch = args }
  onShowAddElementToggle( args ){ this.state.showAddElement = args }
  onShowNavigation( status ){ this.state.showNav = status }
  onConsoleToggle( status ){
    this.state.showConsole = status

    status !== false ? 
            uiStore.set( this.getAttr('active-console'), true )
            : uiStore.clear( this.getAttr('active-console') )
  }
  onRecordChange( element, changes ){
    // Awarness of changes occured on this activeElement
    if( !this.state.activeElement
        || this.state.activeElement.path !== element.path ) return
    
    this.state.activeElement = element // Has changes or revert to initial content
    this.setStateDirty('activeElement')

    // Show changes on tabs
    this.applyTabsChange( element )
    
    /* TODO: Implement auto-save to prevent lost of changes
              when page get accidentally refreshed
    */



  }

  getAttr( target ){ return `${this.state.project.name}-${this.state.activeTool}-${target}` }
  applyTabsChange( arg ){
    // Apply and reflect changes on tabs
    if( typeof arg !== 'object' ) return
    
    Array.isArray( arg ) ?
            this.state.tabs = newObject( arg ) // Update the whole tabs list
            // Change on single tab
            : this.state.tabs = this.state.tabs.map( tab => {
              // Tab already exist
              if( tab.path === arg.path )
                return arg

              return tab
            } )
    
    this.setStateDirty('tabs')
    uiStore.set( this.getAttr('tabs'), this.state.tabs )
  }

  Open( element ){
    // Open file, request, ...
    if( !element ){
      this.state.activeElement = null
      uiStore.clear( this.getAttr('active-element') )

      return
    }

    this.state.activeElement = { ...element, active: true }
    uiStore.set( this.getAttr('active-element'), this.state.activeElement )

    let 
    isActive = false,
    focusIndex,
    counter = 0

    this.state.tabs = this.state.tabs.map( tab => {
      // Tab already exist
      if( tab.path === element.path ){
        // Make tab active
        if( !tab.active ) tab.active = true
        // Changes state of this tab's content
        tab.hasChanges = element.hasChanges
          
        isActive = true
      }
      
      // Off previous active tab
      else if( tab.active ){
        delete tab.active
        focusIndex = counter
      }
      
      counter++
      return tab
    } )
    
    // Add new active tab
    if( !isActive )
      focusIndex === undefined ?
                // At the end of the chain
                this.state.tabs.push( this.state.activeElement )
                // Insert right after the last active tab
                : this.state.tabs.splice( focusIndex + 1, 0, this.state.activeElement )

    this.setStateDirty('tabs')
    uiStore.set( this.getAttr('tabs'), this.state.tabs )
  }
  async FSOperator( type, element ){
    switch( type ){
      case 'new-dir': if( !element.path || !this.fs ) return
                      await this.fs.newDir( element.path )
          break
      case 'new-file': if( !element.path || !this.fs ) return
                        await this.fs.newFile( element.path )
          break
      case 'rename': if( !element.path || !element.name || !this.fs ) return
                      await this.fs.rename( element.path, element.name  )
          break
      case 'remove': if( !element.path || !this.fs ) return
                      await this.fs.remove( element.path )
          break
      case 'move': if( !element.source || !element.destination || !this.fs ) return
                    await this.fs.move( element.source, element.destination )
          break
    }
  }
  async Setup(){

    let AUTORUN = true

    this.state.ongoingSetup = true
    
    // Declare filesystem I/O handler at the project's current working directory
    const cwd = this.state.project.scope.IDE.directory
    this.fs = await window.FileSystem.init( 'project', { cwd, debug: true } )
    // Declare Project's background Process Manager
    this.pm = await window.IProcess.create({ debug: true })

    // Watch external/background operations on this directory
    let wait = 0
    this.fs.watch( async ( event, path, stats ) => {
      debugLog(`[DIRECTORY Event] ${event}: ${path}`, stats )

      switch( event ){
        // New file/dir added: Refresh directory tree
        case 'add':
        case 'addDir': wait && clearTimeout( wait )
                        await this.getDirectory()
            break
        /** Wait for `add` event to conclude file/dir moved: 
            In that case `add event` will refresh the directory.
            otherwise, conclude `delete`
        */
        case 'unlink': wait = setTimeout( async () => await this.getDirectory(), 2000 ); break
                        
      }

    } )

    // Get project directory content
    await this.getDirectory()
    // Get project dependencies
    await this.getDependencies()
    
    // Project doesn't exist
    if( isEmpty( this.state.IDE.directory ) ){
      /* Minimum project payload requirements
        {
          type: 'application',
          name: 'TestApp',
          description: 'Test multipple micro-application',
          scope: {
            IDE: {
              language: 'marko~5+',
              platforms: [ 'multipple~2.0' ],
              directory: '/Users/fabricemarlboro/dev-pro/Myapp-labs/Extensions/TestApp',
              repository: 'https://gitlab.com/multipple/applications/Test-App'
            }
          }
        }
      */
      
      // TODO: Try importing project from specified repository
      

      

      // Setup a completely new project
      await this.pm.setup( this.state.project, ( error, stats ) => {

        if( error ){
          // TODO: Manage process exception errors
          console.log('--Progress Error: ', error )
          return
        }

        // TODO: Display progression stats on Footer
        const { percent, processor, message } = stats
        this.state.ongoingProcess = `[${percent}%] ${processor ? processor +':' : ''}${message}`
      } )

      debugLog('-- Completed indeed --')

      // Automatically run project
      AUTORUN && this.RunEmulator( true )
    }
    else {
      // Mount project's last states
      this.state.tabs = uiStore.get( this.getAttr('tabs') ) || []
      this.state.activeElement = uiStore.get( this.getAttr('active-element') ) || null
      
      // Reload cached emulator state of this project
      const cachedEMImage = uiStore.get( this.getAttr('emulator') )
      if( AUTORUN && cachedEMImage )
        window.env == 'production' ? 
                      this.ReloadEmulator() // Reload backend process
                      : this.RunEmulator() // Connect frontend to process or run process if not available
    }

    this.state.ongoingSetup = false
  }
  async getProject( workspaceId, projectId ){
    try {
      const { error, message, project } = await RGet(`/workspaces/${workspaceId}/projects/${projectId}`)
      if( error ) throw new Error( message )

      this.state.project = project
      await this.Setup()
    }
    catch( error ){
      console.log('Failed retreiving project: ', error )
      this.state.project = null
    }
  }
  async getDirectory( path ){
    // Get project directory content
    if( !this.fs ) return

    const dirOptions = {
      ignore: '\\.git|(.+)\\.lock|sandbox|node_modules',
      subdir: true
    }

    this.state.IDE.directory = await this.fs.directory( path || null, dirOptions )
    this.state.IDE = newObject( this.state.IDE )
  }
  async getDependencies( path ){
    // Get project dependencies in package.json
    if( !this.fs ) return
    
    const packageJson = await this.fs.readFile( 'package.json', { encoding: 'json' } )
    if( !packageJson )
      throw new Error('[Dependency] No package.json file found at the project root')

    const 
    { dependencies, devDependencies } = packageJson,
    deps = [],
    collector = async ( name, version, dev ) => {
      // Get more information about the package in node_modules
      let dep = { name, version: version.replace('^', ''), dev }
      try {
        const { description, repository } = await this.fs.readFile(`./node_modules/${name}/package.json`, { encoding: 'json' } )
        dep = { ...dep, description, repository }
      }
      catch( error ){
        // Failed fetching package.json of the dependency
      }

      deps.push( dep )
    }
    
    for( const name in dependencies )
      await collector( name, dependencies[ name ] )

    for( const name in devDependencies )
      await collector( name, devDependencies[ name ], true )
    
    this.state.IDE.dependencies = deps
    this.state.IDE = newObject( this.state.IDE )
  }
  async onSave( element, changes, confirmCallback ){
    // Awarness of changes occured on this activeElement
    if( typeof element != 'object'
        || !element.path
        || !element.hasChanges ) return
    
    // Write changes on the disk
    this.fs && await this.fs.newFile( element.path, changes )
    // Show change on tab
    this.applyTabsChange({ ...element, hasChanges: false })
    
    // Confirm element saved to the tool
    typeof confirmCallback == 'function' && confirmCallback()
  }

  async RunEmulator( force ){
    // Run/Stop emulator
    if( !this.pm ){
      debugLog('[Emulator Event] error: Undeclared process manager')
      return
    }
    
    // Create emulator instance
    if( !this.emulator )
      this.emulator = this.pm.emulator( this.state.project )

    // Run
    this.state.emulatorStatus = 'loading'
    GState.ws.layout({ mode: 'auto' })
    
    /* Try cached config to reconnect emulator without
      restarting it. Usefull when page got refreshed
      and servers are up
    */
    const cachedEMImage = !force ? uiStore.get( this.getAttr('emulator') ) : false
    if( cachedEMImage )
      this.state.emulator = cachedEMImage
      
    else {
      const metadata = await this.emulator.run()
      if( !metadata ){
        this.state.emulatorStatus = false
        this.state.emulatorError = 'Emulator failed to run. Check your code and retry'
        return
      }

      this.state.emulator = metadata
    }

    this.state.emulatorStatus = 'running'
    uiStore.set( this.getAttr('emulator'), this.state.emulator )
  }
  async ReloadEmulator(){
    // Reload emulator
    if( !this.pm ){
      debugLog('[Emulator Event] error: Undeclared process manager')
      return
    }
    
    // Create emulator instance
    if( !this.emulator )
      this.emulator = this.pm.emulator( this.state.project )
    
    this.state.emulatorStatus = 'reloading'

    this.state.emulator = await this.emulator.reload()
    this.state.emulatorStatus = 'running'
  }
  async QuitEmulator(){
    // Run/Stop emulator
    if( !this.pm ){
      debugLog('[Emulator Event] error: Undeclared process manager')
      return
    }
    
    if( !this.emulator ){
      debugLog('[Emulator Event] error: No active Emulator found')
      return
    }

    // Quit
    this.state.emulator = false
    this.state.emulatorStatus = 'stopping'
  
    await this.emulator.quit()
    this.state.emulatorStatus = false

    GState.ws.layout({ mode: 'ns' })

    // Clear cached config
    uiStore.clear( this.getAttr('emulator') )
  }

  async onAddElement( type, element, progress ){
    
    if( !this.pm ){
      debugLog('[AddElement Event] error: Undeclared process manager')
      return
    }

    switch( type ){
      // Copy store component to this project directory
      case 'component': progress( false, 'ONGOING' )
                        const result = await this.pm.addComponents( element, this.state.project.scope.IDE.directory )
                        result === false ?
                                progress('Unexpected error occured')
                                : progress( false, 'DONE' )
          break
      // Add dependency package to project
      case 'package': this.state.showSearch = false
                      await this.pm.addPackages( element, this.state.project.scope.IDE.directory, ( error, stats ) => {

                        if( error ){
                          // TODO: Manage process exception errors
                          console.log('--Progress Error: ', error )
                          return
                        }

                        // TODO: Display progression stats on Footer
                        const { percent, processor, message } = stats
                        this.state.ongoingProcess = `[${percent}%] ${processor ? processor +' : ' : ''}${message}`
                      } )
                      
                      typeof progress == 'function' && progress('DONE')
                      setTimeout( () => this.state.ongoingProcess = false, 8000 )
          break
    }
  }
  async onAddElementToggle( type ){

    switch( type ){
      case 'component': this.onSearchToggle({ filters: { targets: ['component'] } }); break
      case 'dependency': this.onSearchToggle({ filters: { targets: ['package', 'library'] } }); break
    }

    this.onShowAddElementToggle( false )
  }
}

<div.vh-100>
  <div style="width:calc(100% - 4rem)">
    <Row.no-gutters>
      <!-- Main Block -->
      <div.col.px-0.overflow-hidden>
        <Row.no-gutters>
          <!-- Navigation Bar -->
          <Navigation show=state.showNav
                      project=state.project
                      workspace=state.workspace
                      activeTool=state.activeTool
                      on-toggle('onMenuToggle')
                      on-add('onShowAddElementToggle')
                      on-search('onSearchToggle', true )/>
                      
          <!-- SideBar -->
          <SideBar type=state.activeTool
                    dataset=state[ state.activeTool ]
                    active=state.activeElement
                    status={
                      emulator: state.emulatorStatus
                    }
                    on-action('onAction')
                    on-show-menu('onShowNavigation')/>

          <!-- Main Block -->
          <main.main-block.col.px-0.overflow-hidden>
            <!-- Tabs Bar -->
            <TabBar type=state.activeTool
                    tabs=state.tabs
                    on-open('Open')
                    on-update('applyTabsChange')/>
            
            <div style="height:calc(100% - 3rem)">
              <div.overflow-hidden class=(state.showConsole ? 'h-75' : 'h-100')>
                <Switch by=state.activeTool>
                  <@case is="IDE">
                    <CodeEditor file=state.activeElement
                                paths=state.tabs.map( ({ path }) => { return path } )
                                language=null
                                fs=component.fs
                                on-save('onSave')
                                on-change('onRecordChange')
                                on-cursor-position('onAction', 'cursor-position')/>
                  </@case>

                  <@case is="API">
                    <APITestor />
                  </@case>
                </Switch>
              </div>

              <if( state.showConsole )>
                <div.h-25.border-top>
                  <Console on-dismiss('onConsoleToggle', false )/>
                </div>
              </if>
            </div>
          </main>
        </Row>

        <!-- Search plugin, app, module, ... from marketplace -->
        <if( state.showSearch )>
          <GlobalSearch ...state.showSearch
                        project=state.project
                        on-return('onAddElement')
                        on-dismiss('onSearchToggle', false )/>
        </if>
      </div>

      <!-- Sandbox Emulator block -->
      <Emulator meta=state.emulator
                status=state.emulatorStatus
                error=state.emulatorError
                on-run( 'onAction', 'run-emulator' )
                on-reload( 'onAction', 'reload-emulator' )
                on-quit( 'onAction', 'quit-emulator' )/>
    </Row>
  </div>
  
  <Toolbar />

  <Footer>
    <Row.d-flex.align-items-center>
      <@col>
        <ul.list-inline.m-0>
          <li.px-1.white-text>
            <route-link href=`/workspace/${state.workspace.workspaceId}`>
              ${state.workspace.name}
            </route-link>
          </li>
          <if( state.project )>
            <li.px-1.white-text>${state.project.type.toCapitalCase()}</li>
            <li.px-1.black-text>
              Sync
            </li>
          </if>
        </ul>
      </@col>
      
      <@col.col-8.d-flex.justify-content-end>
        <ul.list-inline.m-0.d-flex.align-items-center>
          <!-- Display ongoing process state -->
          <if( state.ongoingProcess )>
            <li.px-3.white-text.text-ellipsis.d-inline-flex.align-items-center style="max-width:38rem">
              <Bx.bx-burst.font-medium-4 type="cloud-download"/>
              <span.px-50>${state.ongoingProcess}</span>
            </li>
          </if>

          <!-- Toggle console display block -->
          <li.px-1.white-text.cursor-pointer on-click('onConsoleToggle', true )>
            Console
          </li>

          <!-- Display main programming language -->
          <if( state.project )>
            <li.px-1.white-text>${state.project.scope.IDE.language.replace('~', ' ').toCapitalCase()}</li>
          </if>

          <!-- Display editor's cusor current position -->
          <if( state.editorCursorPosition )>
            $ const { lineNumber, column } = state.editorCursorPosition
            <li.px-1.white-text>Ln ${lineNumber}, Col ${column}</li>
          </if>

          <li.px-1.white-text>Spaces: 2</li>
          <li.px-1.white-text>UTF-8</li>
        </ul>
      </@col>
    </Row>
  </Footer>
</div>

<!-- List of element to app to project -->
<if( state.showAddElement )>
  <Modal.p-3 width=40 noBackdrop=true on-dismiss('onShowAddElementToggle', false )>
    <Row>
      <for|type, { label, description, icon }| in=ADDONS>
        <@col.col-4.py-50.cursor-pointer.scale-down key=type>
          <div.d-flex.py-50.align-items-center on-click('onAddElementToggle', type )>
            <Bx.font-large-1
                type=icon.type
                bxs=icon.bxs 
                bxl=icon.bxl
                class=`text-${icon.color}`/>
            <span.font-medium-2.px-1>${label || type.toCapitalCase()}</span>
          </div>
          <p.w-100.text-muted.text-ellipsis-2.font-small-4>
            <Locale>${description}</Locale>
          </p>
        </@col>
      </for>
    </Row>
  </Modal>
</if>