

class {
  onCreate({ type }){
    this.menu = [
      {
        id: 'ADD_NEW_TAB',
        label: 'Add New',
        fn: this.onHandleMenu.bind(this)
      },
      {
        id: 'CLOSE_ALL_TABS',
        label: 'Close All',
        fn: this.onHandleMenu.bind(this)
      },
      {
        id: 'SHOW_TAB_LINK',
        label: 'Show links',
        fn: this.onHandleMenu.bind(this)
      },
      {
        id: 'SAVE_ALL_CHANGES',
        label: 'Save All Changes',
        fn: this.onHandleMenu.bind(this)
      }
    ]
  }
  onInput({ tabs }){ this.setState( 'tabs', tabs ) }

  onToggle( element ){ this.emit( 'open', element ) }
  onClose( index ){
    // Close tab
    const { active, hasChanges } = this.state.tabs[ index ]
    this.state.tabs.splice( index, 1 )
    
    // When closing an active tab, automatically activate closest tab
    if( active ){
      // Auto-focus next tab at the left
      if( this.state.tabs[ index - 1 ] )
        this.emit( 'open', this.state.tabs[ index - 1 ] )

      /* Auto-focus next tab at the right:
          IMPORTANT: Targeted tab already remove 
                      with splice method above so 
                      `index` represent the previous 
                      right side tab
      */ 
      else if( this.state.tabs[ index ] )
        this.emit( 'open', this.state.tabs[ index ] )

      // Signal all tabs closed
      else this.emit( 'open', null )
    }
    
    this.emit( 'update', this.state.tabs )
  }
  onTabPositionChange( from, to ){
    const tab = this.state.tabs[ from ]

    this.state.tabs.splice( from, 1 )
    this.state.tabs.splice( to, 0, tab )
    
    this.emit( 'update', this.state.tabs )
    this.emit( 'open', tab )
  }
  onHandleMenu( id ){
    console.log( id )
  }
}

<macro|{ type, name, path, active, index, itemkey, hasChanges }| name="Tab">
  <li.position-relative.cursor-pointer.px-1.h-100.border-left.border-right.d-flex.align-items-center.hover-toggle
      class=( active ? 'theme-bg-fade' : false )
      style="min-width:150px;margin-left:-1px"
      data-item-key=itemkey>
    <!-- Request Type -->
    <span.font-small-4 on-click('onToggle', { name, path }, true )>
      <Switch by=type>
        <@case is="API">
          <RequestLabel type=type/>
        </@case>
        <@default>
          <FileLabel type=name.split('.').pop()/>
        </@default>
      </Switch>
    </span>

    <!-- Title -->
    <div.px-1.py-50.text-ellipsis
        style="min-width:100px;max-width:180px"
        on-click('onToggle', { name, path }, true )>${name}</div>

    <!-- Changes not saved -->
    <if( hasChanges )>
      <Bx.position-absolute.right-0.p-1.font-small-1.hover-hide
          class=( active ? 'text-success' : 'text-muted' )
          type="circle"
          bxs
          on-click('onClose', index )/>
    </if>

    <!-- Delete toggle: Only if no changes -->
    <Bx.position-absolute.right-0.p-75.font-medium-4.text-muted.hover-block
        type="x"
        on-click('onClose', index )/>
  </li>
</macro>

<div.in-block.position-relative.top-0.w-100.theme-bg.border-bottom.d-flex.align-items-center style="height:3rem;z-index:300;overflow-x:auto;overflow-y:hidden">
  <ul.sort-tabs.h-100.list-inline.m-0.d-flex.align-items-center>
    <Sortable containerClass="sort-tabs"
              axis="X"
              on-change('onTabPositionChange')>
      <for|tab, index| of=state.tabs>
        <@item|{ itemKey }|>
          <Tab type=input.type index=index itemkey=itemKey ...tab/>
        </@item>
      </for>
    </Sortable>
  </ul>
    
  <!-- Add & More options -->
  <div.d-inline-block.position-sticky.right-0.h-100.theme-bg.d-flex.align-items-center.border-left style="margin-left:-1px">
    <Bx.font-medium-5.px-1.cursor-pointer 
        type="plus"
        on-click( () => component.emit('add') )/>
    
    <!-- File options menu -->
    <DropdownMenu.font-medium-5.px-1.cursor-pointer
                  vertical=true
                  right=true
                  menu=component.menu/>
  </div>
</div>