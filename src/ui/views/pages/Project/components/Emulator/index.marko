
import IOF from 'iframe.io'

static const REQUIRED_FEATURES = ['geolocation']
static const SANDBOX_RULES = ['allow-scripts', 'allow-same-origin']
static const ACCOUNT_TYPES = {
  'admin': {
    label: 'ADMIN',
    description: 'Wrap all SUPER-ADMIN, ADMIN & SUPERVISOR accounts'
  },
  'instructor': {
    label: 'INSTRUCTOR',
    description: 'Standard instructor account'
  },
  'learner': {
    label: 'LEARNER',
    description: 'Standard learner/student account'
  }
}
static const ACTIVITY_CONTEXTS = {
  'Explore Courses': { 
    page: 'course',
    event: { id: 'course-id' },
    keywords: [ 'course', 'program', 'activity' ]
  },
  'Classroom': {
    page: 'classroom',
    event: { id: 'enrollment-id' },
    keywords: [ 'course', 'program', 'activity', 'note', 'library' ]
  }
}

class {
  onCreate(){
    this.state = {
      canLoad: false,
      reloading: false,
      languages: null,
      tests: null,
      testMode: false
    }
  }
  onInput({ error, meta, status }){

    if( this.state.reloading ){
      // Still reloading
      if( status !== 'running' ) return
      // Reloading completed
      this.state.reloading = false
    }

    if( !meta ){
      this.state.canLoad = false
      return
    }
    
    // Check whether the emulator server is available
    window.fetch( meta.hostname, { mode: 'no-cors', cache: 'no-cache' } )
          .then( resp => resp.text() )
          .then( () => this.state.canLoad = true ) // Can load the iframe
          .catch( error => this.emit('run') ) // Run emulator & process
  }
  onAction( _event, data, fn ){ this.iof.emit( _event, data, fn ) }
  onLoaded( e ){
    // Remove all previous listeners when iframe reloaded
    this.iof && this.iof.removeListeners()
    
    this.iof = new IOF({ type: 'window', debug: true })
    this.iof.initiate( e.target.contentWindow, this.input.meta.hostname )

    this.iof
    .once( 'connect', () => {
      // Get supported languages manifest of app/plugin
      this.iof.emit( 'get:languages', ( error, manifest ) => {
        if( error ) return
        this.state.languages = manifest
      } )

      // Get created test manifest of app/plugin
      this.iof.emit( 'get:tests', ( error, manifest ) => {
        if( error ) return
        this.state.tests = manifest
      } )
    } )
    .on( 'start', () => {
      // Clear console of sandbox start
      GState.console.clear()
    } )
    .on( 'console:log', GState.console.log )

    // Communicate workspace and screen change to iframe
    GState.on( 'ws', data => this.iof.emit( 'ws:change', data ) )
    GState.on( 'screen', data => this.iof.emit( 'screen:change', data ) )
  }
  onReload(){
    this.state.canLoad = false
    this.state.reloading = true

    this.emit('reload')
  }
  onOpenTest( status ){ this.state.testMode = status }
  onQuit(){
    // Send QUIT signal to extension
    this.iof.emit('signal', 'USER:QUIT')
    // Delay closing emulator to observe extension behaviour during quiting process
    setTimeout( () => this.emit('quit'), 1500 )
  }
}

<WSAdapt.Emulator.section-block.px-0.border-left.theme-bg-fade
        ns="d-none"
        qs="col-3"
        hs="col-6"
        fs="position-absolute col-12">
  <if( state.canLoad )>
    $ const { name, hostname, pid } = input.meta
    
    <iframe.w-100.h-100 
            src=`${hostname}?wp=iframe&base=${pid}`
            title=name
            style="border:none"
            importance="high"
            referrerpolicy="origin"
            allow=REQUIRED_FEATURES.join()
            sandbox=SANDBOX_RULES.join(' ')
            on-load('onLoaded')></iframe>

    <!-- Controls -->
    <ControlBar accountTypes=ACCOUNT_TYPES
                contexts=ACTIVITY_CONTEXTS
                languages=state.languages
                tests=state.tests
                testMode=state.testMode
                on-quit('onQuit')
                on-reload('onReload')
                on-action('onAction')
                on-open-test('onOpenTest')/>
  </if>
  <else>
    <div.w-100.h-100.d-flex.align-items-center.justify-content-center>
      <!-- Processing stage status -->
      <if( state.reloading || input.status )>
        <div.w-100.text-center>
          <Preloader.font-large-3 active=true/>
          <br><br>
          <Locale text=input.status.toCapitalCase()/>
        </div>
      </if>
      <!-- Display error message -->
      <else-if( input.error )>
        <div.text-center>
          <Bx.font-large-3.text-warning type="cube-alt"/>
          <br><br>
          <p.px-4>${input.error}</p>
          <br>
          <Button on-click('onReload')>Retry</Button>
        </div>
      </else-if>
      
      <else>
        <Bx.font-large-3.text-muted type="cube-alt"/>
      </else>
    </div>
  </else>
</WSAdapt>

<if( state.testMode )>
  <TestKit tests=state.tests
            iof=component.iof
            on-action('onAction')
            on-dismiss('onOpenTest', false )/>
</if>