
class {
  onCreate(){
    this.state = {
      active: null,
      showMenu: true,
      showSettings: false,
      extendedBlocks: uiStore.get('extended-blocks') || []
    }
    GState.bind( this, ['ws'])

    this.noChange = false
    this.Actives = {}
  }
  onInput({ type, dataset }){
    
    if( !dataset ) return
    switch( type ){
      case 'Code': if( isEmpty( dataset ) ) return
                  this.Actives[ type ] = { 
                    directories: [ dataset.directories ],
                    dependencies: dataset.dependencies
                  }
          break
          
      case 'API': if( isEmpty( dataset ) ) return
                  this.Actives[ type ] = { 
                    collections: dataset.collections,
                    environments: dataset.environments
                  }
          break
    }
    
    this.state.active = type
  }
  onShowSettings(){
    this.state.showSettings = !this.state.showSettings
    this.emit( 'show-settings', this.state.showSettings )
  }
  onExtendExtraBlock( block, status ){
    // Extend/Close extra blocks: Accordion effect
    status === false ?
              this.state.extendedBlocks = this.state.extendedBlocks.filter( each => { return each !== block } )
              : !this.state.extendedBlocks.includes( block ) ? this.state.extendedBlocks.push( block ) : null
   
   this.setStateDirty('extendedBlocks')
   uiStore.set( 'extended-blocks', this.state.extendedBlocks )
  }
}

<if( input.show )>
  <div.in-block.section-block.px-0 style="width:24rem">
    <div.position-relative.h-100.overflow-auto>
      <for|type, dataset| in=component.Actives>
        <div.position-absolute.theme-bg.h-100.top-0.left-0.right-0 key=type
            class=( state.active == type ? 'zindex-2' : 'zindex-1')>
          <Switch by=type>
            <@case is="Code">
              <Directories ...dataset
                            active=input.active
                            status=input.status
                            extended=(!state.extendedBlocks.includes('dependencies'))
                            on-show-settings('onShowSettings')
                            on-run( () => component.emit( 'action', 'run-emulator', false ) )
                            on-quit( () => component.emit( 'action', 'quit-emulator' ) )
                            on-open( element => component.emit( 'action', 'open', element ) )
                            on-new-dir( element => component.emit( 'action', 'new-dir', element ) )
                            on-new-file( element => component.emit( 'action', 'new-file', element ) )
                            on-move( element => component.emit( 'action', 'move-element', element ) )
                            on-rename( element => component.emit( 'action', 'rename-element', element ) )
                            on-remove( element => component.emit( 'action', 'remove-element', element ) )/>

              <Dependencies deps=dataset.dependencies
                            extended=state.extendedBlocks.includes('dependencies')
                            on-extends('onExtendExtraBlock', 'dependencies')
                            on-add( () => component.emit( 'action', 'add-dependency' ) )
                            on-refresh( () => component.emit( 'action', 'refresh-packages' ) )
                            on-update( packages => component.emit( 'action', 'update-packages', packages ) )
                            on-remove( packages => component.emit( 'action', 'remove-packages', packages ) )/>
            </@case>

            <@case is="API">
              <Collections cols=dataset.collections
                            extended=(!state.extendedBlocks.includes('environments'))/>

              <Environments envs=dataset.environments
                            extended=state.extendedBlocks.includes('environments')
                            on-extends('onExtendExtraBlock', 'environments')/>
            </@case>
          </Switch>
        </div>
      </for>
    </div>
  </div>
</if>