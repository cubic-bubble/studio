
import COMPONENTS_MANIFEST from 'store/components/manifest.json'

static const AVAILABLE_SOURCES = {
  application: {
    type: 'API',
    source: 'https://marketplace.multipple.com/search?type=application&query=',
    matchFields: [ 'nsi', 'name', 'description', 'namespace', 'author', 'category' ]
  },
  plugin: {
    type: 'API',
    source: 'https://marketplace.multipple.com/search?type=plugin&query=',
    matchFields: [ 'nsi', 'name', 'description', 'namespace', 'author', 'category' ]
  },
  library: {
    type: 'API',
    source: 'https://cpm.cubic.studio/package/',
    matchFields: [ 'name', 'description', 'version' ]
  },
  component: {
    type: 'manifest',
    source: COMPONENTS_MANIFEST,
    matchFields: [ 'name', 'description', 'version' ]
  }
}

static function inManifest( source, query, matchFields ){
  
  const results = []
  source.map( each => {
    let match = false

    query.map( word => {
      matchFields.map( field => {
        if( each[ field ] && each[ field ].includes( word ) ) 
          match = true
      } )
    } )

    if( match ) results.push( each )
  } )

  return results
}

class {
  onCreate(){
    this.state = {
      results: {}
    }

    this.SOURCES = {}
  }
  onQuery( query ){
    // New search query
    this.SOURCES = {}
    this.state.results = {}

    const 
    { targets } = this.input.filters || {},
    semanticQuery = query.split(/\+/)

    // Defined targets by user
    if( targets )
      targets.map( target => {
        if( this.SOURCES[ target ] ) return
        this.SOURCES[ target ] = AVAILABLE_SOURCES[ target ]
      } )

    // Auto-specific target by content
    semanticQuery.map( word => {
      Object.keys( AVAILABLE_SOURCES ).map( target => {
        if( word.includes( target ) 
            || target.includes( word )
            && !this.SOURCES[ target ] )
          this.SOURCES[ target ] = AVAILABLE_SOURCES[ target ]
      } )
    } )

    this.launchSearch( semanticQuery )
  }
  onNoQuery(){
    this.SOURCES = {}
    this.state.results = {}
  }
  launchSearch( query ){
    // Search on all target by default
    if( !Object.keys( this.SOURCES ).length )
      this.SOURCES = AVAILABLE_SOURCES

    Object.entries( this.SOURCES )
          .map( ([ target, { type, source, matchFields } ]) => {
            switch( type ){
              case 'manifest': this.state.results[ target ] = inManifest( source, query, matchFields ); break
            }
          } )

    console.log('Results: ', this.state.results )
    this.setStateDirty('results')
  }
}

<context on-add( ( ...args ) => component.emit( 'add', ...args ) )>
  <Modal.px-4.pt-2 width=40 noDismissButton=true on-dismiss( () => component.emit('dismiss') )>
    <SearchBar.round-xs
              on-query('onQuery')
              on-no-query('onNoQuery')/>
    <!-- List of available search target/source types -->
    <if( !Object.keys( state.results ).length )>
      <ul.list-inline.my-1>
        <for|type| in=AVAILABLE_SOURCES>
          <li.px-1.py-50.mx-25.theme-bg-lighten.font-small-4.round>
            <Locale text=type.toCapitalCase()/>
          </li>
        </for>
      </ul>
    </if>
    <!-- Display search results -->
    <else>
      <SearchResult table=state.results/>
    </else>
  </Modal>
</context>