
import { AVAILABLE_SOURCES, ManifestQuery, APIQuery } from './sources'

class {
  onCreate(){
    this.state = {
      results: {},
      searching: false,
      memory: []
    }

    this.SOURCES = {}
  }
  onInput({ filters }){
    // Defined targets by user
    const { targets } = filters || {}
    if( targets ){
      this.SOURCES = {}

      targets.map( target => {
        if( !AVAILABLE_SOURCES[ target ] || this.SOURCES[ target ] ) return
        this.SOURCES[ target ] = AVAILABLE_SOURCES[ target ]
      } )
    }
  }
  onMount(){ this.state.memory = uiStore.get( this.getAttr('memory') ) || [] }

  getAttr( attr ){ return `${this.input.project.name}--gsearch-${attr}` }
  noTargetFilter(){
    return !this.input.filters
            || !this.input.filters.targets
            || !this.input.filters.targets.length
  }
  launchSearch( query ){
    // Search on all target by default
    if( !Object.keys( this.SOURCES ).length )
      this.SOURCES = AVAILABLE_SOURCES
      
    let searchCount = 0
    Object.entries( this.SOURCES )
          .map( async ([ source, { type } ]) => {
            switch( type ){
              case 'API': searchCount++
                          if( !this.state.searching ) this.state.searching = true

                          this.state.results[ source ] = await APIQuery( source, query )
                          searchCount--
                          
                          this.state.results = newObject( this.state.results )
                          debugLog('API Query search result: ', this.state.results )
                          // Last to respond close the search
                          if( !searchCount ) this.state.searching = false
                  break
              case 'manifest': searchCount++
                                if( !this.state.searching ) this.state.searching = true

                                this.state.results[ source ] = await ManifestQuery( source, query )
                                debugLog('Manifest Query search result: ', this.state.results )
                                searchCount--

                                // Last to respond close the search
                                if( !searchCount ) this.state.searching = false
                  break
            }
          } )
  }

  onQuery( query ){
    // New search query
    this.state.results = {}
    const semanticQuery = query.split(/\+/)

    // Auto-specific target by content
    if( this.noTargetFilter() )
      semanticQuery.map( word => {
        Object.keys( AVAILABLE_SOURCES ).map( target => {
          if( ( word.includes( target ) || target.includes( word ) )
              && !this.SOURCES[ target ] )
            this.SOURCES[ target ] = AVAILABLE_SOURCES[ target ]
        } )
      } )
      
    this.launchSearch( semanticQuery )
  }
  onNoQuery(){
    // this.SOURCES = {}
    this.state.results = {}
  }
  onMemorize( data, status ){
    // Memorize selected search items: For bulk return or install
    if( data === 'clear' ){
      this.state.memory = []
      uiStore.clear( this.getAttr('memory') )
      return
    }
    
    status === false ? 
          this.state.memory = this.state.memory.filter( ({ name, version }) => { return data.name != name || data.version != version } )
          : !this.state.memory.filter( ({ name, version }) => { return data.name == name && data.version == version } ).length ? 
                                                  this.state.memory = [ ...(this.state.memory), data ] : null
    
    this.setStateDirty('memory')
    uiStore.set( this.getAttr('memory'), this.state.memory )
  }
  onReturn(){
    // Return search memory content
    if( !this.state.memory.length ) return

    // Group items by source
    const bySource = {}
    this.state.memory.map( each => {

      if( !bySource[ each.source ] ) 
        bySource[ each.source ] = [ each ]

      bySource[ each.source ].push( each )
    } )

    // Emit return each source group seperately
    Object.entries( bySource )
          .map( ([ source, items ]) => {
            this.emit( 'return', source, items, (function(){ this.onMemorize('clear') }).bind(this) )
          } )
  }
}

<context on-return( ( ...args ) => component.emit( 'return', ...args ) )
          on-memorize('onMemorize')>
  <Modal.px-4.pt-2 
        width=40 
        transparent
        noDismissButton 
        on-dismiss( () => component.emit('dismiss') )>
    <SearchBar.round-xs.shadow-lg
              size="xl"
              searching=state.searching
              on-query('onQuery')
              on-no-query('onNoQuery')/>
    <!-- List of available search target/source types -->
    <if( !Object.keys( state.results ).length )>
      <ul.position-relative.zindex-2.list-inline.my-1>
        <for|type| in=( Object.keys( component.SOURCES ).length ? component.SOURCES : AVAILABLE_SOURCES )>
          <li.px-75.py-25.mx-25.theme-bg-lighten.font-small-3.round>
            <Locale text=type.toCapitalCase()/>
          </li>
        </for>
      </ul>
    </if>
    <!-- Display search results -->
    <else>
      <SearchResult table=state.results
                    memory=state.memory
                    searching=state.searching
                    on-return('onReturn')
                    on-memorize('onMemorize')/>
    </else>
  </Modal>
</context>