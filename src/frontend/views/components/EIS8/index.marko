
import Channel from './lib/channel'
import {
  SANDBOX_RULES,
  ACCOUNT_TYPES,
  REQUIRED_FEATURES,
  ACTIVITY_CONTEXTS
} from './lib/specs'

class {
  onCreate(){
    this.state = {
      canLoad: false,
      reloading: false,
      languages: null,
      tests: null,
      testMode: false
    }
  }
  onInput({ error, meta, status }){

    if( this.state.reloading ){
      // Still reloading
      if( status !== 'running' ) return
      // Reloading completed
      this.state.reloading = false
    }

    if( !meta ){
      this.state.canLoad = false
      return
    }
    
    // Check whether the emulator server is available
    window.fetch( meta.hostname, { mode: 'no-cors', cache: 'no-cache' } )
          .then( resp => resp.text() )
          .then( () => this.state.canLoad = true ) // Can load the iframe
          .catch( error => this.emit('run') ) // Run emulator & process
  }
  onAction( _event, data, fn ){ this.iof.emit( _event, data, fn ) }
  onLoaded( e ){ Channel.bind( this )( e ) }
  onReload(){
    this.state.canLoad = false
    this.state.reloading = true

    this.emit('reload')
  }
  onOpenTest( status ){ this.state.testMode = status }
  onQuit(){
    // Send QUIT signal to extension
    this.iof.emit('signal', 'USER:QUIT')
    // Delay closing emulator to observe extension behaviour during quiting process
    setTimeout( () => this.emit('quit'), 1500 )
  }
}

<div.Emulator.h-100>
  <if( state.canLoad )>
    $ const { name, hostname, pid } = input.meta
    
    <iframe.rounded-lg
            src=`${hostname}?wp=iframe&base=${pid}`
            style="width:calc(100% - 2rem);height:calc(100% - 2rem);margin:1rem;border:none"
            title=name
            importance="high"
            referrerpolicy="origin"
            allow=REQUIRED_FEATURES.join()
            sandbox=SANDBOX_RULES.join(' ')
            on-load('onLoaded')></iframe>

    <!-- Controls -->
    <ControlBar accountTypes=ACCOUNT_TYPES
                contexts=ACTIVITY_CONTEXTS
                languages=state.languages
                tests=state.tests
                testMode=state.testMode
                on-quit('onQuit')
                on-reload('onReload')
                on-action('onAction')
                on-open-test('onOpenTest')/>
  </if>
  <else>
    <div.w-100.h-100.d-flex.align-items-center.justify-content-center>
      <!-- Processing stage status -->
      <if( state.reloading || input.status )>
        <div.w-100.text-center>
          <Preloader.font-large-3 active=true/>
          <br><br>
          <Locale text=( input.status || 'Reloading' ).toCapitalCase()/>
        </div>
      </if>
      <!-- Display error message -->
      <else-if( input.error )>
        <div.text-center>
          <Bx.font-large-3.text-warning type="cube-alt"/>
          <br><br>
          <p.px-4>${input.error}</p>
          <br>
          <Button type="md" on-click('onReload')>Retry</Button>
        </div>
      </else-if>
      <else>
        <Bx.font-large-3.text-muted type="cube-alt"/>
      </else>
    </div>
  </else>
</div>

<if( state.testMode )>
  <TestKit tests=state.tests
            iof=component.iof
            on-action('onAction')
            on-dismiss('onOpenTest', false )/>
</if>