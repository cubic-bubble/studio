
import { AVAILABLE_TARGETS, ManifestQuery, APIQuery } from './targets'

class {
  onCreate(){
    this.state = {
      results: {},
      searching: false,
      memory: []
    }

    this.TARGETS = {}
  }
  onInput({ filters }){
    // Defined targets by user
    const { targets } = filters || {}
    if( targets ){
      this.TARGETS = {}

      targets.map( target => {
        if( !AVAILABLE_TARGETS[ target ] || this.TARGETS[ target ] ) return
        this.TARGETS[ target ] = AVAILABLE_TARGETS[ target ]
      } )
    }
  }
  onMount(){ this.state.memory = uiStore.get( this.getAttr('memory') ) || [] }

  getAttr( attr ){ return `${this.input.project.name}--gsearch-${attr}` }
  noTargetFilter(){
    return !this.input.filters
            || !this.input.filters.targets
            || !this.input.filters.targets.length
  }
  launchSearch( query ){
    console.log( query, this.TARGETS )
    // Search on all target by default
    if( !Object.keys( this.TARGETS ).length )
      this.TARGETS = AVAILABLE_TARGETS
      
    let searchCount = 0

    function byTarget([ target, sources ]){
      sources.map( async ({ type }) => {
        switch( type ){
          case 'API': searchCount++
                      if( !this.state.searching ) this.state.searching = true
                      
                      this.state.results[ target ] = await APIQuery( target, query )
                      searchCount--
                      
                      this.state.results = newObject( this.state.results )
                      debugLog('API Query search result: ', this.state.results )
                      // Last to respond close the search
                      if( !searchCount ) this.state.searching = false
              break
          case 'manifest': searchCount++
                            if( !this.state.searching ) this.state.searching = true

                            this.state.results[ target ] = await ManifestQuery( target, query )
                            debugLog('Manifest Query search result: ', this.state.results )
                            searchCount--

                            // Last to respond close the search
                            if( !searchCount ) this.state.searching = false
              break
        }
      })
    }

    Object
    .entries( this.TARGETS )
    .map( byTarget.bind(this) )
  }

  onQuery( query ){
    // New search query
    this.state.results = {}
    const semanticQuery = query.split(/\+/)

    // Auto-specific target by content
    if( this.noTargetFilter() )
      semanticQuery.map( word => {
        Object.keys( AVAILABLE_TARGETS ).map( target => {
          if( ( word.includes( target ) || target.includes( word ) )
              && !this.TARGETS[ target ] )
            this.TARGETS[ target ] = AVAILABLE_TARGETS[ target ]
        } )
      } )
      
    this.launchSearch( semanticQuery )
  }
  onNoQuery(){
    // this.TARGETS = {}
    this.state.results = {}
  }
  onMemorize( data, status ){
    // Memorize selected search items: For bulk return or install
    if( data === 'clear' ){
      this.state.memory = []
      uiStore.clear( this.getAttr('memory') )
      return
    }
    
    status === false ? 
          this.state.memory = this.state.memory.filter( ({ item, version }) => { return data.item.name != item.name || data.version != version } )
          : !this.state.memory.filter( ({ item, version }) => { return data.item.name == item.name && data.version == version } ).length ? 
                                                  this.state.memory = [ ...(this.state.memory), data ] : null
    
    this.setStateDirty('memory')
    uiStore.set( this.getAttr('memory'), this.state.memory )
  }
  onReturn(){
    // Return search memory content
    if( !this.state.memory.length ) return

    // Group items by source
    const bySource = {}
    this.state.memory.map( each => {

      if( !bySource[ each.source ] ) 
        bySource[ each.source ] = [ each ]

      bySource[ each.source ].push( each )
    } )

    // Emit return each source group seperately
    Object.entries( bySource )
          .map( ([ source, items ]) => {
            this.emit( 'return', source, items, (function(){ this.onMemorize('clear') }).bind(this) )
          } )
  }
}

<context on-return( ( ...args ) => component.emit( 'return', ...args ) )
          on-memorize('onMemorize')>
  <Modal.px-4.pt-2 
        width=50 
        transparent
        noDismissButton 
        on-dismiss( () => component.emit('dismiss') )>
    $ {
      const
      targetsLen = Object.keys( component.TARGETS ).length,
      resultsLen = Object.keys( state.results ).length
    }

    <div style={ minHeight: !resultsLen ? '30rem' : 'auto'}>
      <SearchBar.round-xs.shadow-lg
                size="xl"
                autofocus
                placeholder="Search keywords ..."
                searching=state.searching
                on-query('onQuery')
                on-no-query('onNoQuery')/>
      <!-- List of available search targets -->
      <if( !resultsLen )>
        <div.position-relative.zindex-2.my-1>
          <for|target, sources| in=( targetsLen ? component.TARGETS : AVAILABLE_TARGETS )>
            <div.py-1>
              <span.px-1.py-50.mx-25.theme-bg-fade.font-small-3.round>
                <Locale text=`${target}s`.toCapitalCase()/>
              </span>

              <if( Array.isArray( sources ) && sources.length )>
                <br><br>
                <Row>
                  <for|{ name, label, description, website }| of=sources>
                    <@col.col-4>
                      <a.d-flex.align-items-center.border.px-2.py-1.rounded-lg href=website target="_blank">
                        <Image.pr-4 src=`/images/icons/${name}.png` style="height:32px"/>
                        <div.pl-4>
                          <h5.font-medium-3.mt-0>${label}</h5>
                          <span.font-small-3.text-muted>${description}</span>
                        </div>
                      </a>
                    </@col>
                  </for>
                </Row>
              </if>
            </div>
          </for>
        </div>
      </if>
      <!-- Display search results -->
      <else>
        <SearchResult table=state.results
                      memory=state.memory
                      searching=state.searching
                      on-return('onReturn')
                      on-memorize('onMemorize')/>
      </else>
    </div>
  </Modal>
</context>