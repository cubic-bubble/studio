
class {
  onCreate(){
    this.state = {
      extendedBlocks: window.Store.get('extended-blocks') || []
    }

    GState.bind( this, ['ws'])
  }
  onInput({ context }){
    if( !context || !context.name ) return

    // Mount project's last states of the active section
    switch( context.name ){
      case 'API':
      case 'Code':
      case 'Unit':
      case 'Socket': {
        context.sm.define('tabs', [] )
        context.sm.define('activeConsole', null )
        context.sm.define('activeElement', null )
      } break

      case 'Documentation': {
        context.sm.define('activeElement', null )
      } break
    }
  }
  onExtendExtraBlock( block, status ){
    // Extend/Close extra blocks: Accordion effect
    status === false ?
              this.state.extendedBlocks = this.state.extendedBlocks.filter( each => { return each !== block } )
              : !this.state.extendedBlocks.includes( block ) ? this.state.extendedBlocks.push( block ) : null
   
   this.setStateDirty('extendedBlocks')
   window.Store.set( 'extended-blocks', this.state.extendedBlocks )
  }
}

$ const { name, active, layouts, device, env, sm, ws } = input.context

<!-- Superposed Active Sections -->
<div.position-absolute.w-100.h-100.theme-bg.top-0.animated.faster.fadeIn class=(!active ? 'd-none' : false)>
  <Row.no-gutters>
    <!-- SideBar -->
    <if( input.sidebar 
          && typeof input.sidebar.renderBody == 'function' 
          && Array.isArray( layouts )
          && layouts.includes('sidebar') )>
      <div.in-block.section-block.px-0.border-right style="width:24rem" key="sidebar">
        <div.position-relative.h-100.overflow-auto>
          <${input.sidebar.renderBody} ...sm.get()/>
        </div>
      </div>
    </if>

    <!-- Main -->
    <div.section-block.col.px-0.overflow-hidden key="main">
      <!-- Tabs Bar -->
      <if( input.tabs !== undefined )>
        <TabBar tabs=(sm.get('tabs', name ) || [])
                on-open( element => typeof input.tabs == 'object' && typeof input.tabs.open == 'function' && input.tabs.open( element ) )
                on-update( tabs => sm.applyTabChange( tabs ) )/>
      </if>
      
      <!-- Body Container -->
      <div style="height:calc(100% - 3rem)">
        $ const hasActiveConsole = input.lowerbody && sm.get('activeConsole', name )
        
        <!-- Body -->
        <if( input.body && typeof input.body.renderBody == 'function' )>
          <div.overflow-hidden class=(hasActiveConsole ? 'h-75' : 'h-100') key="body">
            <${input.body.renderBody}/>
          </div>
        </if>

        <!-- Lower body -->
        <if( hasActiveConsole )>
          <div.h-25.border-top key="lowerbody">
            <${input.lowerbody.renderBody}/>
          </div>
        </if>
      </div>
    </div>

    <!-- Letbar -->
    <if( input.letbar )>
      <WSAdapt.section-block.zindex-3.px-0.border-left.theme-bg-fade
              key="letbar"
              ns="d-none"
              qs="col-3"
              hs="col-6"
              fs="position-absolute col-12"
              style="z-index:30!important">
        <${input.letbar.renderBody} device=device env=env/>
      </WSAdapt>
    </if>
  </Row>
</div>