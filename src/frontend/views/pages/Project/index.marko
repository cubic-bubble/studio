
import Utils from './extends/utils'
import Operators from './extends/operators'
import Initializer from './extends/initializer'
import EmulatorManager from './extends/emulator'

static const APITabs = [
  {
    type: 'GET',
    name: 'Test Get Request',
    link: '...'
  },
  {
    active: true,
    type: 'POST',
    name: 'Test Post Request',
    link: '...'
  },
  {
    type: 'PUT',
    name: 'Test Put Request',
    link: '...'
  },
  {
    type: 'DELETE',
    name: 'Test Delete Request',
    link: '...'
  },
  {
    type: 'PATCH',
    name: 'Test Patch Request',
    link: '...'
  },
  {
    type: 'HEAD',
    name: 'Test Head Request',
    link: '...'
  },
  {
    type: 'OPTIONS',
    name: 'Test Options Request',
    link: '...'
  }
]

class {
  onCreate({ params }){
    this.state = {
      workspace: GState.workspaces.get( params.id ),
      project: false,
      
      // Sections dataset
      Code: {},
      API: {},
      Socket: {},

      // Active indications
      sections: [],
      activeSection: null,
      
      emulator: false,
      emulatorError: false,
      emulatorStatus: false,
      
      showAddon: false,
      showSearch: false,
      showExplorer: false,
      showSettings: false,
      showResetProject: false,
      showDeleteProject: false,
      
      layouts: [],
      ongoingSetup: false,
      ongoingProcess: false,

      editorCursorPosition: null
    }

    new Utils( this )
    new Operators( this )
    new Initializer( this )
    new EmulatorManager( this )

    // Inherit flag from precedent page
    this.flag = uiStore.get('action-flag')
  }
  async onInput({ params }){
    // Fetch project metadata
    await this.getProject( params.id, params.project )
  }
  onOpen( element ){
    // Open file, request, ...
    if( !element )
      return this.clearSection('activeElement')
    
    const activeElement = { ...element, active: true }
    this.setSection('activeElement', activeElement)

    let
    isActive = false,
    focusIndex,
    counter = 0
    
    const tabs = (this.getSection('tabs') || []).map( tab => {
      // Tab already exist
      if( tab.path === element.path ){
        // Make tab active
        if( !tab.active ) tab.active = true
        // Changes state of this tab's content
        tab.hasChanges = element.hasChanges
          
        isActive = true
      }
      
      // Off previous active tab
      else if( tab.active ){
        delete tab.active
        focusIndex = counter
      }
      
      counter++
      return tab
    })
    
    // Add new active tab
    if( !isActive )
      focusIndex === undefined ?
                tabs.push( activeElement ) // At the end of the chain
                : tabs.splice( focusIndex + 1, 0, activeElement ) // Insert right after the last active tab

    this.setSection('tabs', tabs )
  }
  onAction( action, ...args ){
    switch( action ){
      case 'open': this.onOpen( ...args ); break
      
      case 'new-dir': 
      case 'new-file':
      case 'move-element':
      case 'rename-element':
      case 'remove-element': this.FSOperator( action, ...args ); break
      case 'cursor-position': this.state.editorCursorPosition = args[0]; break

      case 'run-emulator': this.RunEmulator( ...args ); break
      case 'reload-emulator': this.ReloadEmulator(); break
      case 'quit-emulator': this.QuitEmulator(); break
      
      case 'add-dependency': this.onAddonSelect('dependency'); break
      case 'update-packages':
      case 'remove-packages': 
      case 'refresh-packages': this.PackageOperator( action, ...args ); break
      case 'delete-project': this.DeleteProject(); break
    }
  }
  onAddonToggle( args ){ this.state.showAddon = args }
  onSearchToggle( args ){ this.state.showSearch = args }
  onSettingsToggle( type ){ this.state.showSettings = type }
  onConsoleToggle( status ){ this.setSection('activeConsole', status ) }
  onShowResetProjectToggle( type ){ this.state.showResetProject = type }
  onShowDeleteProjectToggle( type ){ this.state.showDeleteProject = type }
  onExplorerToggle( status, fn ){ this.state.showExplorer = status ? { fn } : false }
  onMenuSelect( name ){ this.state.activeSection = name }
  onLayoutChange( blocks ){
    this.state.layouts = blocks
    this.setStateDirty('layouts')
  }
  onAddonSelect( type ){

    switch( type ){
      case 'plugin':
      case 'component': this.onSearchToggle({ filters: { targets: [ type ] } }); break
      case 'dependency': this.onSearchToggle({ filters: { targets: ['package', 'library'] } }); break
      case 'share': this.onSettingsToggle('share'); break
    }

    this.onAddonToggle( false )
  }
  onChangeOccurance( element, changes ){
    // Awarness of changes occured on this active element
    const activeElement = this.getSection('activeElement')
    if( !activeElement || activeElement.path !== element.path ) return
    
    // Has changes or revert to initial content
    this.setSection('activeElement', element )
    // Show changes on tabs
    this.applyTabsChange( element )
    
    /* TODO: Implement auto-save to prevent lost of changes
              when page get accidentally refreshed
    */


  }
  
  async onSave( element, changes, confirmCallback ){
    // Awarness of changes occured on this active element
    if( typeof element != 'object'
        || !element.path
        || !element.hasChanges ) return
    
    // Write changes on the disk
    this.fs && await this.fs.newFile( element.path, changes )
    // Show change on tab
    this.applyTabsChange({ ...element, hasChanges: false })
    
    // Confirm element saved to the tool
    typeof confirmCallback == 'function' && confirmCallback()
  }
  async onAddElement( type, element, progress ){
    
    if( !this.pm ){
      debugLog('[AddElement Event] error: Undeclared process manager')
      return
    }

    switch( type ){
      // Copy store component to this project directory
      case 'component': progress( false, 'ONGOING' )
                        const result = await this.pm.addComponents( element, this.state.project.specs.code.directory )
                        result === false ?
                                progress('Unexpected error occured')
                                : progress( false, 'DONE' )
          break
      // Install dependency package to project
      case 'package': await this.PackageOperator( 'install', element )
        
                      // GlobalSearch callback to confirm process done
                      typeof progress == 'function' && progress()
                      // Wait for global search to clear memory
                      setTimeout( () => this.state.showSearch = false, 500 )
          break
    }
  }
}

<div.vh-100>
  <div style="width:calc(100% - 3rem)">
    <Row.no-gutters>
      <!-- Main Block -->
      <div.col.px-0.overflow-hidden.d-flex.align-items-strech>
        <!-- Workspace control tabs -->
        <ControlLayout on-change('onLayoutChange')/>

        <Row.no-gutters style="width:calc(100% - 2rem)">
          <!-- Menu Bar -->
          <Menu show=state.layouts.includes('menu')
                project=state.project
                workspace=state.workspace
                sections=[ ...state.sections ]
                activeSection=state.activeSection
                on-add('onAddonToggle')
                on-select('onMenuSelect')
                on-search('onSearchToggle', true )/>

          <main.main-block.section-block.col.px-0.overflow-hidden>
            <if( state.sections.length )>
              <for|section, index| of=state.sections>
                <!-- Superposed Active Sections -->
                <div.position-absolute.w-100.h-100.theme-bg.top-0.animated.faster.fadeIn class=(state.activeSection != section ? 'd-none' : false)>
                  <Row.no-gutters>
                    <!-- SideBar -->
                    <SideBar show=state.layouts.includes('sidebar')
                              type=state.activeSection
                              dataset=component.getSection()
                              active=component.getSection('activeElement')
                              status={
                                emulator: state.emulatorStatus
                              }
                              on-action('onAction')
                              on-show-settings('onSettingsToggle')/>

                    <!-- Main Block -->
                    <div.section-block.col.px-0.overflow-hidden>
                      <!-- Tabs Bar -->
                      $ const tabs = component.getSection('tabs') || []
                      <TabBar type=state.activeSection
                              tabs=tabs
                              on-open('onOpen')
                              on-update('applyTabsChange')/>
                      
                      <!-- Body Container -->
                      <div style="height:calc(100% - 3rem)">
                        $ const activeConsole = component.getSection('activeConsole')

                        <div.overflow-hidden class=(activeConsole ? 'h-75' : 'h-100')>
                          <Switch by=section>
                            <@case is="Code">
                              <CodeEditor file=component.getSection('activeElement')
                                          paths=tabs.map( ({ path }) => { return path } )
                                          language=null
                                          fs=component.fs
                                          on-save('onSave')
                                          on-change('onChangeOccurance')
                                          on-cursor-position('onAction', 'cursor-position')/>
                            </@case>

                            <@case is="API">
                              <APITestor />
                            </@case>
                          </Switch>
                        </div>

                        <if( activeConsole )>
                          <div.h-25.border-top>
                            <Console project=state.project
                                      on-dismiss('onConsoleToggle', false )/>
                          </div>
                        </if>
                      </div>
                    </div>
                  </Row>
                </div>
              </for>
            </if>
          </main>
        </Row>

        <!-- Search plugin, app, module, ... from marketplace -->
        <if( state.showSearch )>
          <GlobalSearch ...state.showSearch
                        project=state.project
                        on-return('onAddElement')
                        on-dismiss('onSearchToggle', false )/>
        </if>

        <!-- <Plugin name="LiveShare"/> -->
      </div>
      
      <WSAdapt.section-block.px-0.border-left.theme-bg-fade
              ns="d-none"
              qs="col-3"
              hs="col-6"
              fs="position-absolute col-12">
        <!-- Sandbox Emulator: Model EIS8 -->
        <EIS8 meta=state.emulator
              status=state.emulatorStatus
              error=state.emulatorError
              on-run( 'onAction', 'run-emulator' )
              on-reload( 'onAction', 'reload-emulator' )
              on-quit( 'onAction', 'quit-emulator' )/>        
      </WSAdapt>
    </Row>
  </div>
  
  <Toolbar />

  <Footer>
    <Row.d-flex.align-items-center>
      <@col>
        <ul.list-inline.m-0>
          <li.px-1.white-text>
            <route-link href=`/workspace/${state.workspace.workspaceId}`>
              ${state.workspace.name}
            </route-link>
          </li>
          <if( state.project )>
            <li.px-1.white-text>${state.project.type.toCapitalCase()}</li>
            <li.px-1.black-text>
              Sync
            </li>
          </if>
        </ul>
      </@col>
      
      <@col.col-8.d-flex.justify-content-end>
        <ul.list-inline.m-0.d-flex.align-items-center>
          <!-- Display ongoing process state -->
          <if( state.ongoingProcess )>
            <li><Progression ...state.ongoingProcess/></li>
          </if>

          <!-- Toggle console display block -->
          <li.px-1.white-text.cursor-pointer on-click('onConsoleToggle', true )>
            Console
          </li>

          <!-- Display main programming language -->
          <if( component.hasCodeSection() )>
            <li.px-1.white-text>${state.project.specs.code.language.replace('~', ' ').toCapitalCase()}</li>
          </if>

          <!-- Display editor's cusor current position -->
          <if( state.editorCursorPosition )>
            $ const { lineNumber, column } = state.editorCursorPosition
            <li.px-1.white-text>Ln ${lineNumber}, Col ${column}</li>
          </if>

          <li.px-1.white-text>Spaces: 2</li>
          <li.px-1.white-text>UTF-8</li>
        </ul>
      </@col>
    </Row>
  </Footer>
</div>

<!-- List of element to app to project -->
<if( state.showAddon )>
  <Addon on-select('onAddonSelect')
          on-dismiss('onAddonToggle', false )/>
</if>

<!-- Project settings -->
<if( state.showSettings )>
  <Settings type=state.showSettings
            workspace=state.workspace
            project=state.project
            on-dismiss('onSettingsToggle', false )
            on-delete-toggle('onShowDeleteProjectToggle', true )/>
</if>

<!-- Reset project -->
<if( state.showResetProject )>
  <ResetProject workspace=state.workspace
                project=state.project
                on-continue('getProject')
                on-setup('SetupProject', 'setup')
                on-explorer('onExplorerToggle', true )
                on-dismiss('onShowResetProjectToggle', false )/>
</if>

<!-- Delete project -->
<if( state.showDeleteProject )>
  <DeleteProject workspace=state.workspace
                  project=state.project
                  on-confirm('onAction', 'delete-project')
                  on-dismiss('onShowDeleteProjectToggle', false )/>
</if>

<!-- Show File System Explorer -->
<if( state.showExplorer )>
  <FSExplorer modal
              options={ ignore: '^\\.' }
              ...state.showExplorer
              on-dismiss('onExplorerToggle', false )/>
</if>

<if( state.ongoingSetup )>
  <GLoading ...state.ongoingSetup/>
</if>