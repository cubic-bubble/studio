
import Utils from './extends/utils'
import Operators from './extends/operators'
import Initializer from './extends/initializer'

class {
  onCreate({ params }){
    this.state = {
      workspace: GState.workspaces.get( params.id ),
      project: false,
      env: null,
      
      // Sections dataset
      Code: {},
      API: {},
      Socket: {},
      Unit: {},
      Roadmap: {},
      Documentation: {},

      // Active indications
      sections: [],
      activeSection: null,
      
      device: false,
      deviceError: false,
      deviceStatus: false,
      
      ongoingSetup: false,
      ongoingProcess: false,

      editorCursorPosition: null
    }

    new Utils( this )
    new Operators( this )
    new Initializer( this )

    // Inherit flag from precedent page
    this.flag = window.Store.get('action-flag')
  }
  async onInput({ params }){
    // Fetch project metadata
    await this.getProject( params.id, params.project )
  }

  onAction( target, ...args ){
    switch( target ){
      case 'open': this.sm.open( ...args ); break
      
      case 'directories': this.FSOperator( ...args ); break
      case 'packages': this.PackageOperator( ...args ); break
      case 'collections': this.CollectionOperator( ...args ); break

      // case 'features': this.ws.select.feature( ...args ); break
      case 'device': this.DeviceOperator( ...args ); break

      case 'delete-project': this.DeleteProject(); break
    }
  }
  onShowResetProjectToggle( type ){ this.state.showResetProject = type }
  onShowDeleteProjectToggle( type ){ this.state.showDeleteProject = type }
  async onAddElement( type, element, progress ){
    
    if( !this.pm ){
      debugLog('[AddElement Event] error: Undeclared process manager')
      return
    }

    switch( type ){
      // Copy store component to this project directory
      case 'component': progress( false, 'ONGOING' )
                        const result = await this.pm.addComponents( element, this.state.project.specs.code.directory )
                        result === false ?
                                progress('Unexpected error occured')
                                : progress( false, 'DONE' )
          break
      // Install dependency package to project
      case 'package': await this.PackageOperator( 'install', element )
                      
                      // GlobalSearch callback to confirm process done
                      typeof progress == 'function' && progress()
                      // Wait for global search to clear memory
                      setTimeout( () => this.state.showSearch = false, 500 )
          break
    }
  }
}

<div.vh-100>
  <div style="width:calc(100% - 4rem)">
    <Row.no-gutters>
      <!-- Main Block -->
      <div.col.px-0.overflow-hidden.d-flex.align-items-strech>
        <!-- Workspace control tabs -->
        <ControlLayout on-change( component.ws.layouts.change )/>

        <Row.no-gutters style="width:calc(100% - 2rem)">
          <!-- Menu Bar -->
          <Menu show=state.layouts.includes('menu')
                project=state.project
                workspace=state.workspace
                sections=[ ...state.sections ]
                activeSection=state.activeSection
                on-add( component.ws.toggle.feature )
                on-select( component.ws.select.menu )
                on-search( () => component.ws.toggle.search( true ) )/>

          <main.main-block.section-block.col.px-0.overflow-hidden>
            <if( state.sections.length )>
              <for|section, index| of=state.sections>
                $ const context = {
                    name: section,
                    active: state.activeSection == section,
                    project: state.project,
                    layouts: state.layouts,
                    env: state.env,
                    device: {
                      metadata: state.device,
                      status: state.deviceStatus,
                      error: state.deviceError
                    },
                    fs: component.fs,
                    sm: component.sm,
                    ws: component.ws
                  }

                <${require(`./sections/${section}/index.marko`)} key=index context=context on-action('onAction')/>
              </for>
            </if>
          </main>
        </Row>

        <!-- Search plugin, app, module, ... from marketplace -->
        <if( state.showSearch )>
          <GlobalSearch ...state.showSearch
                        project=state.project
                        on-return('onAddElement')
                        on-dismiss( () => component.ws.toggle.search( false ) )/>
        </if>

        <!-- <Plugin name="LiveShare"/> -->
      </div>
    </Row>
  </div>
  
  <Toolbar/>

  <Footer>
    <@lobe _class="theme-bg-transparent">
      <Link href=`/workspace/${state.workspace.workspaceId}`>
        ${state.workspace.name}
      </Link>
    </@lobe>

    <Row.d-flex.align-items-center>
      <if( state.project )>
        <@col>
          <ul.list-inline.m-0>
              <li.px-1.white-text>${state.project.name}</li>
              <li.px-1.white-text>${state.project.type.toCapitalCase()}</li>
              <li.px-1.black-text>Sync</li>
          </ul>
        </@col>
      </if>
      
      <@col.col-8.d-flex.justify-content-end>
        <ul.list-inline.m-0.d-flex.align-items-center>
          <!-- Display ongoing process state -->
          <if( state.ongoingProcess )>
            <li><Progression ...state.ongoingProcess/></li>
          </if>

          <!-- Toggle console display block -->
          <li.px-1.white-text.cursor-pointer on-click( () => component.ws.toggle.console( true ) )>
            Console
          </li>

          <!-- Display main programming language -->
          <if( component.sm.hasCode() )>
            <li.px-1.white-text>${state.project.specs.code.language.replace('~', ' ').toCapitalCase()}</li>

            <!-- Display editor's cusor current position -->
            <if( state.editorCursorPosition )>
              $ const { lineNumber, column } = state.editorCursorPosition
              <li.px-1.white-text>Ln ${lineNumber}, Col ${column}</li>
            </if>

            <li.px-1.white-text>Spaces: 2</li>
            <li.px-1.white-text>UTF-8</li>
          </if>
        </ul>
      </@col>
    </Row>
  </Footer>
</div>

<!-- List of major features to perform on a project -->
<if( state.showFeatures )>
  <Features on-select( component.ws.select.feature )
            on-dismiss( () => component.ws.toggle.feature( false ) )/>
</if>

<!-- List of element to app to project -->
<if( state.showPublisher )>
  <Publisher on-continue('onAction')
              on-dismiss( () => component.ws.toggle.pubilsh( false ) )/>
</if>

<!-- Project settings -->
<if( state.showSettings )>
  <Settings type=state.showSettings
            workspace=state.workspace
            project=state.project
            on-dismiss( () => component.ws.toggle.settings( false ) )
            on-delete-toggle('onShowDeleteProjectToggle', true )/>
</if>

<!-- Reset project -->
<if( state.showResetProject )>
  <ResetProject workspace=state.workspace
                project=state.project
                on-continue('getProject')
                on-setup('SetupProject', 'setup')
                on-explorer( () => component.ws.toggle.explorer( true ) )
                on-dismiss('onShowResetProjectToggle', false )/>
</if>

<!-- Delete project -->
<if( state.showDeleteProject )>
  <DeleteProject workspace=state.workspace
                  project=state.project
                  on-confirm('onAction', 'delete-project')
                  on-dismiss('onShowDeleteProjectToggle', false )/>
</if>

<!-- Show File System Explorer -->
<if( state.showExplorer )>
  <FSExplorer modal
              options={ ignore: '^\\.' }
              ...state.showExplorer
              on-dismiss( () => component.ws.toggle.explorer( false ) )/>
</if>

<if( state.ongoingSetup )>
  <GLoading ...state.ongoingSetup/>
</if>