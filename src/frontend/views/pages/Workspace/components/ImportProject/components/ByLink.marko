
import FormHandler from 'markojs-form'

static const LINK_REGEX = /^https:\/\/cubic.webmicros.com\/v([1-9]+)(\/specs\/([a-z0-9]{14})-([a-z0-9]{3}))$/
static function isLink( value ){
  // Validate the link
  return value && LINK_REGEX.test( value )
}

class {
  onCreate(){
    this.state = { 
      addedLink: false,
      importing: false,
      submitting: false 
    }

    this.fhandler = new FormHandler({ key: 'import-link', autosave: true, crosscheck: true })
    this.fhandler.bind(this)
    this.fhandler.on( 'input', ( name, value ) => {
      if( name !== 'link' ) return

      this.state.addedLink = isLink( value )
      this.fhandler.error( 'link', false )
    } )

    if( isLink( this.state.form.link ) )
      this.state.addedLink = true
  }
  onCancel(){
    this.fhandler.reset()
    this.contextEmit('dismiss')
  }
  onAddDirectory({ path }){
    if( !path ) return

    // project must be set before add its directory
    if( !this.state.form.name ){
      this.fhandler.error('name', true )
      return
    }
    
    // Automatically add project as directory
    path += '/'+ this.state.form.name
    this.fhandler.set( 'specs.code.directory', path )
  }
  onSubmit(){
    if( !isEmpty( this.state.formError )
        && Object.values( this.state.formError ).includes( true ) ) return

    const Form = this.state.form
    delete this.state.form.link

    // Becomes first member on the project
    Form.members = [
      {
        ...GState.get('user'),
        role: 'OWNER',
        active: true
      }
    ]

    this.state.submitting = true
    
    this.contextEmit( 'submit', Form, (function( error, status ){
      
      this.state.submitting = false
      if( error )
        return this.fhandler.alert( error, status )

      this.fhandler.alert('Project imported')
      this.fhandler.reset()

      this.contextEmit('dismiss')
    }).bind(this) )
  }
  async onImport(){
    try {
      this.state.importing = true

      const 
      [ _, version, url ] = this.state.form.link.match( LINK_REGEX ),
      { error, message, project } = await RGet( url )
      if( error ) throw new Error( message )

      this.state.importing = false
      this.fhandler.fill( project )
    }
    catch( error ){
      console.log('Failed fetching project specs: ', error )

      this.state.importing = false
      this.fhandler.error( 'link', 'Invalid link' )
    }
  }
}

<context|{}, emit| from="ImportProject">
  $ component.contextEmit = emit

  <form key="import-link">
    <section.form-froup>
      <!-- Project type -->
      <label><Locale text="Link"/></label>
      <div class="form-group">
        <input.round-xs.form-control.form-control-lg px-2
                type="text"
                value=state.form.link
                name="link"
                required
                placeholder=( Locale('Eg. https://cubic.webmicros.com/specs/bf0eb...e0bf2-3ef') )
                on-input('__onChange')/>
        <p class=( 'small mt-50 mb-2'+( !state.formError.link ? ' d-none' : '' ) )>
          <Locale.text-warning text=( state.formError.link || "Project's specs link")/>
        </p>
      </div>
    </section>
    
    <if( state.form.type )>
      <section>
        <h5.pb-1><Locale.font-small-3.text-muted text=state.form.type/></h5>

        <h5.mt-0>${state.form.name}</h5>
        <p>${state.form.description}</p>
      </section>

      <!-- Project specs -->
      <section>
        <h5.pb-1><Locale.font-small-3.text-muted text="Project specs"/></h5>
        
        <if( ['application', 'plugin', 'library'].includes( state.form.type ) )>
          <!-- Source code locations -->
          <div.form-group>
            <label><Locale text="Directory"/></label>
            <div class="form-group">
              <div class="input-group">
                <input.round-xs
                        type="text"
                        value=state.form.specs.code.directory
                        name="specs.code.directory"
                        class=( 'form-control form-control-lg px-2'+( state.formError['specs.code.directory'] != undefined ? ( state.formError['specs.code.directory'] ? ' is-invalid' : ' is-valid' ) : '' ) )
                        validate="required"
                        placeholder=( Locale('Directory*') )
                        on-change('__onChange')/>

                <!-- Show FileSyste Explorer Modal -->
                <div class="input-group-append">
                  <button class="btn btn-primary btn-lg" 
                          on-click( emit, 'explorer', component.onAddDirectory.bind( component ) )>
                    <Bx.font-medium-5 type="folder"/>
                  </button>
                </div>
              </div>
              <if( state.formError['specs.code.directory'] )>
                <p.small.mt-50.mb-2>
                  <Locale.text-warning text="Directory of the project"/>
                </p>
              </if>
              <else>
                <p.small.mt-50.mb-2.text-muted>
                  <Locale>Location of the project on your local drive</Locale>
                </p>
              </else>
            </div>
          </div>

          <!-- Source code git repository -->
          <if( state.form.specs 
                && state.form.specs.code 
                && !state.form.specs.code.repository )>
            <div.form-group>
              <label><Locale text="Repository"/></label>
              <div class="form-group">
                <input.round-xs
                        type="text"
                        value=state.form.specs.code.repository
                        name="specs.code.repository"
                        class=( 'form-control form-control-lg px-2'+( state.formError['specs.code.repository'] != undefined ? ( state.formError['specs.code.repository'] ? ' is-invalid' : ' is-valid' ) : '' ) )
                        placeholder=( Locale('Git Repository') )
                        on-change('__onChange')/>
                <p.small.mt-50.mb-2.text-muted>
                  <Locale>
                    We recommand to initialize the project with a Git repository 
                    to keep your code safe and on good progression track.
                  </Locale>
                </p>
              </div>
            </div>
          </if>
        </if>
      </section>

      <!-- Add testing -->


    </if>
    
    <FormAlert alert=state.alert/>
    <br>
    <div.text-right>
      <Button.mx-50 type="reset" on-click('onCancel')>Cancel</Button>

      <if( state.addedLink )>
        <Button.mx-50
                primary=true
                type="submit"
                preload=(state.importing || state.submitting)
                on-click( state.form.type && state.form.name ? 'onSubmit' : 'onImport' )>
          <Locale text=( state.form.type && state.form.name ? 'Save' : 'Import' )/>
        </Button>
      </if>
    </div>
  </form>
</context>