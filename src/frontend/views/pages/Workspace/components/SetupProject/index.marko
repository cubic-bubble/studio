
import FormHandler from 'markojs-form'

static const ProjectTypes = [
  { label: 'Application', value: 'application' },
  { label: 'Plugin', value: 'plugin' },
  { label: 'Library', value: 'library' },
  { label: 'Testing', value: 'test' },
  { label: 'Utility', value: 'utility' }
]

class {
  onCreate(){
    this.state = { submitting: false }

    this.fhandler = new FormHandler({ key: 'create-project', autosave: true, crosscheck: true })
    this.fhandler.bind( this, {
      type: 'application', // Default
      specs: {
        code: {
          platforms: [ 'multipple~2.0' ],
          language: 'marko~5+',
          directory: '',
          repository: ''
        },
        API: null,
        sockets: null,
        units: null,
        roadmap: null,
        documentations: null
      }
    })
  }
  onCancel(){
    this.fhandler.reset()
    this.emit('dismiss')
  }
  onAddDirectory({ path }){
    if( !path ) return

    // project must be set before add its directory
    if( !this.state.form.name ){
      this.fhandler.error('name', true )
      return
    }
    
    // Automatically add project as directory
    path += '/'+ this.state.form.name
    this.fhandler.set('specs.code.directory', path )
  }
  onSubmit(){
    if( !isEmpty( this.state.formError )
        && Object.values( this.state.formError ).includes( true ) ) return

    const Form = this.state.form

    // First member is owner of the project
    Form.members = [
      {
        ...GState.get('user'),
        role: 'OWNER',
        active: true
      }
    ]
    Form.icon = false

    // Initial roadmap content
    if( Form.specs.roadmap )
      Form.specs.roadmap = {
        charter: {
          name: Form.name,
          description: Form.description
        },
        usecases: [],
        phases: [],
        tasks: [],
        resources: [],
        risks: [],
        budget: [],
        marketing: [],
        pricing: [],
        opportunities: []
      }
    
    // No-code project
    if( !['application', 'plugin'].includes( Form.type ) ) 
      Form.specs.code = undefined
    
    if( Form.specs.API ) Form.specs.API = []
    if( Form.specs.sockets ) Form.specs.sockets = []
    if( Form.specs.units ) Form.specs.units = []
    if( Form.specs.documentations ) Form.specs.documentations = []

    this.state.submitting = true
    
    this.emit('submit', Form, (function( error, status ){
      this.state.submitting = false
      if( error )
        return this.fhandler.alert( error, status )

      // After submited
      this.fhandler.alert('Project created')
      this.fhandler.reset()
    }).bind(this) )
  }
}

<form key="create-project">
  <h5><Locale text="Create Project"/></h5>
  <br>

  <div.form-row>
    <!-- Project type -->
    <div.col-4>
      <label><Locale text="Type"/></label>
      <div class="form-group">
        <Select.round-xs
                value=state.form.type
                name="type"
                validate="required"
                placeholder=( Locale('Type*') )
                options=ProjectTypes
                on-select('__onChange')/>
      </div>
    </div>

    <!-- Project name -->
    <div.col>
      <label><Locale text="Name"/></label>
      <div class="form-group">
        <input.round-xs
                type="text"
                value=state.form.name
                name="name"
                class=( 'form-control form-control-lg px-2'+( state.formError.name != undefined ? ( state.formError.name ? ' is-invalid' : ' is-valid' ) : '' ) )
                validate="required"
                placeholder=( Locale('Name*') )
                on-change('__onChange')/>
        <p class=( 'small mt-50 mb-2'+( !state.formError.name ? ' d-none' : '' ) )>
          <Locale.text-warning text="Name of the project"/>
        </p>
      </div>
    </div>
  </div>

  <!-- Description -->
  <div class="form-group">
    <label><Locale text="Description"/></label>
    <textarea.round-xs
              type="text"
              value=state.form.description
              name="description"
              class=`form-control form-control-lg px-2 ${state.formError.description != null ? ( state.formError.description ? ' is-invalid' : ' is-valid' ) : ''}`
              placeholder=Locale('Description')
              style={ height: '100px', resize: 'none' }
              on-change('__onChange')></textarea>
  </div>
  
  <!-- Project specs -->
  <if( state.form.type )>
    <if( ['application', 'plugin', 'library'].includes( state.form.type ) )>
      <h5.pb-1><Locale.font-small-3.text-muted text="Project specs"/></h5>
      
      <div.form-row>
        <!-- Targeted platforms -->
        <div.col-4>
          <label><Locale text="Platforms"/></label>
          <div class="form-group">
            <Select.round-xs
                    value=state.form.specs.code.platforms[0]
                    name="specs.code.platforms"
                    disabled
                    validate="required"
                    placeholder=( Locale('Platforms*') )
                    options=[
                      { label: 'Multipple 2.0', value: 'multipple~2.0' }
                    ]
                    on-select('__onChange')/>
          </div>
        </div>

        <!-- Programming language -->
        <div.col-4>
          <label><Locale text="Language"/></label>
          <div class="form-group">
            <Select.round-xs
                    value=state.form.specs.code.language
                    name="specs.code.language"
                    validate="required"
                    placeholder=( Locale('Language*') )
                    options=[
                      { label: 'Marko 5', value: 'marko~5+' },
                      { label: 'Marko 4', value: 'marko~4' },
                      { label: 'React JSX', value: 'react', disabled: true }
                    ]
                    on-select('__onChange')/>
          </div>
        </div>
      </div>

      <!-- Source code locations -->
      <div.form-group>
        <label><Locale text="Directory"/></label>
        <div class="form-group">
          <div class="input-group">
            <input.round-xs
                    type="text"
                    value=state.form.specs.code.directory
                    name="specs.code.directory"
                    class=( 'form-control form-control-lg px-2'+( state.formError['specs.code.directory'] != undefined ? ( state.formError['specs.code.directory'] ? ' is-invalid' : ' is-valid' ) : '' ) )
                    validate="required"
                    placeholder=( Locale('Directory*') )
                    on-change('__onChange')/>

            <!-- Show FileSyste Explorer Modal -->
            <div class="input-group-append">
              <button class="btn btn-primary btn-lg" 
                      on-click( () => component.emit('explorer', component.onAddDirectory.bind( component ) ) )>
                <Bx.font-medium-5 type="folder"/>
              </button>
            </div>
          </div>
          <if( state.formError['specs.code.directory'] )>
            <p.small.mt-50.mb-2>
              <Locale.text-warning text="Directory of the project"/>
            </p>
          </if>
          <else>
            <p.small.mt-50.mb-2.text-muted>
              <Locale>Location of the project on your local drive</Locale>
            </p>
          </else>
        </div>
      </div>

      <!-- Source code git repository -->
      <div.form-group>
        <label><Locale text="Repository"/></label>
        <div class="form-group">
          <input.round-xs
                  type="text"
                  value=state.form.specs.code.repository
                  name="specs.code.repository"
                  class=( 'form-control form-control-lg px-2'+( state.formError['specs.code.repository'] != undefined ? ( state.formError['specs.code.repository'] ? ' is-invalid' : ' is-valid' ) : '' ) )
                  placeholder=( Locale('Git Repository') )
                  on-change('__onChange')/>
          <p.small.mt-50.mb-2.text-muted>
            <Locale>
              We recommand to initialize a new project with a Git repository 
              to keep your code safe and on good progression track.
            </Locale>
          </p>
        </div>
      </div>
    </if>

    <label><Locale text="Testing & Utility"/></label>
    <br><br>
    <div.form-row>
      <!-- Roadmap -->
      <div.col-4.mb-50>
        <div class="checkbox checkbox-primary">
          <input type="checkbox"
                  no-update
                  id="specs.roadmap"
                  name="specs.roadmap"
                  checked=state.form.specs.roadmap
                  on-change('__onChecked')/>
          <label for="specs.roadmap" class="font-medium-1">
            <Locale>Roadmap</Locale>
            <br>
            <p.font-small-3.text-muted>
              <Locale>
                Plan, manage & track every aspect of the project
              </Locale>
            </p>
          </label>
        </div>
      </div>

      <!-- Testing tools -->
      <if( ['application', 'plugin', 'library', 'test'].includes( state.form.type ) )>
        <!-- API test -->
        <div.col-4.mb-50>
          <div class="checkbox checkbox-primary">
            <input.disabled type="checkbox"
                    no-update
                    id="specs.API"
                    name="specs.API"
                    checked=state.form.specs.API
                    on-change('__onChecked')/>
            <label for="specs.API" class="font-medium-1">
              <Locale>API Test</Locale>
              <br>
              <p.font-small-3.text-muted>
                <Locale>
                  Create, test & document your API endpoints
                </Locale>
              </p>
            </label>
          </div>
        </div>

        <!-- Socket test -->
        <div.col-4.mb-50>
          <div class="checkbox checkbox-primary">
            <input type="checkbox"
                    no-update
                    disabled
                    id="specs.sockets"
                    name="specs.sockets"
                    checked=state.form.specs.sockets
                    on-change('__onChecked')/>
            <label for="specs.sockets" class="font-medium-1">
              <Locale>Sockets Test</Locale>
              <br>
              <p.font-small-3.text-muted>
                <Locale>
                  Websocket & Socket.io connection tests
                </Locale>
              </p>
            </label>
          </div>
        </div>

        <!-- Unit test -->
        <div.col-4.mb-50>
          <div class="checkbox checkbox-primary">
            <input type="checkbox"
                    no-update
                    disabled
                    id="specs.units"
                    name="specs.units"
                    checked=state.form.specs.units
                    on-change('__onChecked')/>
            <label for="specs.units" class="font-medium-1">
              <Locale>Units Test</Locale>
              <br>
              <p.font-small-3.text-muted>
                <Locale>
                  Create and maintain unit tests of the project
                </Locale>
              </p>
            </label>
          </div>
        </div>
      </if>

      <!-- Utilities tools -->
      <if( ['application', 'plugin', 'library', 'test', 'utility'].includes( state.form.type ) )>
        <!-- Documentation Editor test -->
        <div.col-4.mb-50>
          <div class="checkbox checkbox-primary">
            <input.disabled type="checkbox"
                    no-update
                    id="specs.documentations"
                    name="specs.documentations"
                    checked=state.form.specs.documentations
                    on-change('__onChecked')/>
            <label for="specs.documentations" class="font-medium-1">
              <Locale>Documentation</Locale>
              <br>
              <p.font-small-3.text-muted>
                <Locale>
                  Generate, manage & deploy documentations for your work
                </Locale>
              </p>
            </label>
          </div>
        </div>
      </if>
    </div>
  </if>
  
  <FormAlert alert=state.alert/>
  
  <br>
  <div.text-right>
    <Button.mx-50 type="reset" on-click('onCancel')>Cancel</Button>

    <if( state.form.type && state.form.name )>
      <Button.mx-50 primary
              preload=state.submitting
              type="submit"
              on-click('onSubmit')>
        <Locale text="Create"/>
      </Button>
    </if>
  </div>
</form>